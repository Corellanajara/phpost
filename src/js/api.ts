/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Philanthroposts API OAUTH2
 * API for Philanthroposts Mobile App
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://virtserver.swaggerhub.com/coraza/philanthroposts/1.0.0".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 *
 * @export
 * @interface Campaign
 */
export interface Campaign {
    /**
     *
     * @type {string}
     * @memberof Campaign
     */
    name?: string;
}

/**
 *
 * @export
 * @interface Comment
 */
export interface Comment {
    /**
     *
     * @type {string}
     * @memberof Comment
     */
    text?: string;
    /**
     *
     * @type {Date}
     * @memberof Comment
     */
    timestamp?: Date;
    /**
     *
     * @type {Profile}
     * @memberof Comment
     */
    poster?: Profile;
}

/**
 *
 * @export
 * @interface Donation
 */
export interface Donation {
    /**
     *
     * @type {number}
     * @memberof Donation
     */
    amount?: number;
    /**
     *
     * @type {string}
     * @memberof Donation
     */
    currency?: string;
}

/**
 *
 * @export
 * @interface EditProfile
 */
export interface EditProfile {
    /**
     *
     * @type {string}
     * @memberof EditProfile
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof EditProfile
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof EditProfile
     */
    bio?: string;
}

/**
 *
 * @export
 * @interface Media
 */
export interface Media {
    /**
     *
     * @type {string}
     * @memberof Media
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof Media
     */
    type?: string;
}

/**
 *
 * @export
 * @interface NewCampaign
 */
export interface NewCampaign {
    /**
     *
     * @type {string}
     * @memberof NewCampaign
     */
    name?: string;
}

/**
 *
 * @export
 * @interface NewProfile
 */
export interface NewProfile {
    /**
     *
     * @type {string}
     * @memberof NewProfile
     */
    password: string;
}

/**
 *
 * @export
 * @interface Post
 */
export interface Post {
    /**
     *
     * @type {string}
     * @memberof Post
     */
    text?: string;
    /**
     *
     * @type {Date}
     * @memberof Post
     */
    timestamp?: Date;
    /**
     *
     * @type {Array&lt;Media&gt;}
     * @memberof Post
     */
    media?: Array<Media>;
}

/**
 *
 * @export
 * @interface Profile
 */
export interface Profile {
    /**
     *
     * @type {number}
     * @memberof Profile
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof Profile
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Profile
     */
    bio?: string;
    /**
     *
     * @type {string}
     * @memberof Profile
     */
    bannerUrl?: string;
    /**
     *
     * @type {number}
     * @memberof Profile
     */
    level?: number;
    /**
     *
     * @type {boolean}
     * @memberof Profile
     */
    charity?: boolean;
    /**
     *
     * @type {string}
     * @memberof Profile
     */
    avatarUrl?: string;
}


/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Edit user profile
         * @param {any} avatar Edit user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        avatarPost(avatar: any, options: any = {}): FetchArgs {
            // verify required parameter 'avatar' is not null or undefined
            if (avatar === null || avatar === undefined) {
                throw new RequiredError('avatar','Required parameter avatar was null or undefined when calling avatarPost.');
            }
            const localVarPath = `/avatar`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            // authentication application required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("application", ["read", "write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (avatar !== undefined) {
                localVarFormParams.set('avatar', avatar as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes the campaign by id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignIdDelete(options: any = {}): FetchArgs {
            const localVarPath = `/campaign/{id}`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication application required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("application", ["read", "write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Donate to campaign
         * @param {number} id ID of the campaign
         * @param {Donation} [donation] Donate funds to campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignIdDonatePost(id: number, donation?: Donation, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling campaignIdDonatePost.');
            }
            const localVarPath = `/campaign/{id}/donate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication application required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("application", ["read", "write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = JSON.stringify(donation || {});

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Get campaign information
         * @param {number} id ID of profile to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignIdGet(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling campaignIdGet.');
            }
            const localVarPath = `/campaign/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication application required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("application", ["read", "write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Get campaign posts
         * @param {number} id ID of campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignIdPostsGet(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling campaignIdPostsGet.');
            }
            const localVarPath = `/campaign/{id}/posts`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication application required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("application", ["read", "write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit campaign data
         * @summary Edit campaign data
         * @param {NewCampaign} [campaign] Edit campaign data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignIdPut(campaign?: NewCampaign, options: any = {}): FetchArgs {
            const localVarPath = `/campaign/{id}`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication application required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("application", ["read", "write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = JSON.stringify(campaign || {});

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new campaign
         * @summary Create new campaign
         * @param {NewCampaign} [campaign] Create campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignPost(campaign?: NewCampaign, options: any = {}): FetchArgs {
            const localVarPath = `/campaign`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication application required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("application", ["read", "write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = JSON.stringify(campaign || {});

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Delete a comment
         * @param {number} id ID of the campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentIdDelete(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling commentIdDelete.');
            }
            const localVarPath = `/comment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication application required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("application", ["read", "write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Update a comment
         * @param {number} id ID of the campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentIdPut(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling commentIdPut.');
            }
            const localVarPath = `/comment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication application required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("application", ["read", "write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * asdfasdf
         * @summary Get posts feed
         * @param {number} [lastPost] last post to start from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedGet(lastPost?: number, options: any = {}): FetchArgs {
            const localVarPath = `/feed`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication application required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("application", ["read", "write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (lastPost !== undefined) {
                localVarQueryParameter['last_post'] = lastPost;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Get media information
         * @param {number} id ID of media to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaIdGet(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling mediaIdGet.');
            }
            const localVarPath = `/media/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication application required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("application", ["read", "write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Get post comments
         * @param {number} id ID of post to get
         * @param {number} [lastComment] Last comment to start from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIdCommentsGet(id: number, lastComment?: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postIdCommentsGet.');
            }
            const localVarPath = `/post/{id}/comments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication application required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("application", ["read", "write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (lastComment !== undefined) {
                localVarQueryParameter['last_comment'] = lastComment;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Post a comment
         * @param {number} id ID of the campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIdCommentsPost(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postIdCommentsPost.');
            }
            const localVarPath = `/post/{id}/comments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication application required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("application", ["read", "write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Delete post
         * @param {number} id ID of post to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIdDelete(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postIdDelete.');
            }
            const localVarPath = `/post/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication application required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("application", ["read", "write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Get post information
         * @param {number} id ID of post to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIdGet(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postIdGet.');
            }
            const localVarPath = `/post/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication application required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("application", ["read", "write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * asdf
         * @summary Search profile
         * @param {string} [name] User name
         * @param {string} [country] Country Name
         * @param {number} [page] Pagination number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileGet(name?: string, country?: string, page?: number, options: any = {}): FetchArgs {
            const localVarPath = `/profile`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication application required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("application", ["read", "write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Get user campaigns
         * @param {number} id ID of profile to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileIdCampaignsGet(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling profileIdCampaignsGet.');
            }
            const localVarPath = `/profile/{id}/campaigns`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication application required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("application", ["read", "write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Server example operation
         * @param {number} id ID of profile to get
         * @param {string} [action] May follow or unfollow profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileIdGet(id: number, action?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling profileIdGet.');
            }
            const localVarPath = `/profile/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication application required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("application", ["read", "write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Get profile posts
         * @param {number} id ID of profile to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileIdPostsGet(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling profileIdPostsGet.');
            }
            const localVarPath = `/profile/{id}/posts`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication application required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("application", ["read", "write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Must be the same user
         * @summary Get user social links status
         * @param {number} id ID of profile to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileIdSocialLinksGet(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling profileIdSocialLinksGet.');
            }
            const localVarPath = `/profile/{id}/social_links`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication application required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("application", ["read", "write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Get profile thresholds
         * @param {number} id ID of profile to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileIdThresholdsGet(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling profileIdThresholdsGet.');
            }
            const localVarPath = `/profile/{id}/thresholds`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication application required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("application", ["read", "write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Create new user
         * @param {NewProfile} [profile] Create user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilePost(profile?: NewProfile, options: any = {}): FetchArgs {
            const localVarPath = `/profile`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication application required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("application", ["read", "write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = JSON.stringify(profile || {});

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Edit user profile
         * @param {EditProfile} [profile] Edit user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilePut(profile?: EditProfile, options: any = {}): FetchArgs {
            const localVarPath = `/profile`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication application required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("application", ["read", "write"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = JSON.stringify(profile || {});

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Edit user profile
         * @param {any} avatar Edit user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        avatarPost(avatar: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).avatarPost(avatar, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Deletes the campaign by id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignIdDelete(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).campaignIdDelete(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Donate to campaign
         * @param {number} id ID of the campaign
         * @param {Donation} [donation] Donate funds to campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignIdDonatePost(id: number, donation?: Donation, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).campaignIdDonatePost(id, donation, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Get campaign information
         * @param {number} id ID of profile to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignIdGet(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Campaign> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).campaignIdGet(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Get campaign posts
         * @param {number} id ID of campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignIdPostsGet(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Post>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).campaignIdPostsGet(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Edit campaign data
         * @summary Edit campaign data
         * @param {NewCampaign} [campaign] Edit campaign data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignIdPut(campaign?: NewCampaign, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).campaignIdPut(campaign, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a new campaign
         * @summary Create new campaign
         * @param {NewCampaign} [campaign] Create campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignPost(campaign?: NewCampaign, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).campaignPost(campaign, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Delete a comment
         * @param {number} id ID of the campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentIdDelete(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).commentIdDelete(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Update a comment
         * @param {number} id ID of the campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentIdPut(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).commentIdPut(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * asdfasdf
         * @summary Get posts feed
         * @param {number} [lastPost] last post to start from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedGet(lastPost?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Post>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).feedGet(lastPost, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Get media information
         * @param {number} id ID of media to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaIdGet(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Media> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).mediaIdGet(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Get post comments
         * @param {number} id ID of post to get
         * @param {number} [lastComment] Last comment to start from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIdCommentsGet(id: number, lastComment?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Comment>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).postIdCommentsGet(id, lastComment, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Post a comment
         * @param {number} id ID of the campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIdCommentsPost(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).postIdCommentsPost(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Delete post
         * @param {number} id ID of post to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIdDelete(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).postIdDelete(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Get post information
         * @param {number} id ID of post to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIdGet(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Post> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).postIdGet(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * asdf
         * @summary Search profile
         * @param {string} [name] User name
         * @param {string} [country] Country Name
         * @param {number} [page] Pagination number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileGet(name?: string, country?: string, page?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Profile>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).profileGet(name, country, page, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Get user campaigns
         * @param {number} id ID of profile to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileIdCampaignsGet(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Campaign>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).profileIdCampaignsGet(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Server example operation
         * @param {number} id ID of profile to get
         * @param {string} [action] May follow or unfollow profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileIdGet(id: number, action?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Campaign> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).profileIdGet(id, action, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Get profile posts
         * @param {number} id ID of profile to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileIdPostsGet(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Post>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).profileIdPostsGet(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Must be the same user
         * @summary Get user social links status
         * @param {number} id ID of profile to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileIdSocialLinksGet(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).profileIdSocialLinksGet(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Get profile thresholds
         * @param {number} id ID of profile to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileIdThresholdsGet(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).profileIdThresholdsGet(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Create new user
         * @param {NewProfile} [profile] Create user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilePost(profile?: NewProfile, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).profilePost(profile, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Edit user profile
         * @param {EditProfile} [profile] Edit user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilePut(profile?: EditProfile, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).profilePut(profile, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Edit user profile
         * @param {any} avatar Edit user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        avatarPost(avatar: any, options?: any) {
            return DefaultApiFp(configuration).avatarPost(avatar, options)(fetch, basePath);
        },
        /**
         *
         * @summary Deletes the campaign by id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignIdDelete(options?: any) {
            return DefaultApiFp(configuration).campaignIdDelete(options)(fetch, basePath);
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Donate to campaign
         * @param {number} id ID of the campaign
         * @param {Donation} [donation] Donate funds to campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignIdDonatePost(id: number, donation?: Donation, options?: any) {
            return DefaultApiFp(configuration).campaignIdDonatePost(id, donation, options)(fetch, basePath);
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Get campaign information
         * @param {number} id ID of profile to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignIdGet(id: number, options?: any) {
            return DefaultApiFp(configuration).campaignIdGet(id, options)(fetch, basePath);
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Get campaign posts
         * @param {number} id ID of campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignIdPostsGet(id: number, options?: any) {
            return DefaultApiFp(configuration).campaignIdPostsGet(id, options)(fetch, basePath);
        },
        /**
         * Edit campaign data
         * @summary Edit campaign data
         * @param {NewCampaign} [campaign] Edit campaign data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignIdPut(campaign?: NewCampaign, options?: any) {
            return DefaultApiFp(configuration).campaignIdPut(campaign, options)(fetch, basePath);
        },
        /**
         * Create a new campaign
         * @summary Create new campaign
         * @param {NewCampaign} [campaign] Create campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignPost(campaign?: NewCampaign, options?: any) {
            return DefaultApiFp(configuration).campaignPost(campaign, options)(fetch, basePath);
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Delete a comment
         * @param {number} id ID of the campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentIdDelete(id: number, options?: any) {
            return DefaultApiFp(configuration).commentIdDelete(id, options)(fetch, basePath);
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Update a comment
         * @param {number} id ID of the campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentIdPut(id: number, options?: any) {
            return DefaultApiFp(configuration).commentIdPut(id, options)(fetch, basePath);
        },
        /**
         * asdfasdf
         * @summary Get posts feed
         * @param {number} [lastPost] last post to start from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedGet(lastPost?: number, options?: any) {
            return DefaultApiFp(configuration).feedGet(lastPost, options)(fetch, basePath);
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Get media information
         * @param {number} id ID of media to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaIdGet(id: number, options?: any) {
            return DefaultApiFp(configuration).mediaIdGet(id, options)(fetch, basePath);
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Get post comments
         * @param {number} id ID of post to get
         * @param {number} [lastComment] Last comment to start from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIdCommentsGet(id: number, lastComment?: number, options?: any) {
            return DefaultApiFp(configuration).postIdCommentsGet(id, lastComment, options)(fetch, basePath);
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Post a comment
         * @param {number} id ID of the campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIdCommentsPost(id: number, options?: any) {
            return DefaultApiFp(configuration).postIdCommentsPost(id, options)(fetch, basePath);
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Delete post
         * @param {number} id ID of post to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIdDelete(id: number, options?: any) {
            return DefaultApiFp(configuration).postIdDelete(id, options)(fetch, basePath);
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Get post information
         * @param {number} id ID of post to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIdGet(id: number, options?: any) {
            return DefaultApiFp(configuration).postIdGet(id, options)(fetch, basePath);
        },
        /**
         * asdf
         * @summary Search profile
         * @param {string} [name] User name
         * @param {string} [country] Country Name
         * @param {number} [page] Pagination number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileGet(name?: string, country?: string, page?: number, options?: any) {
            return DefaultApiFp(configuration).profileGet(name, country, page, options)(fetch, basePath);
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Get user campaigns
         * @param {number} id ID of profile to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileIdCampaignsGet(id: number, options?: any) {
            return DefaultApiFp(configuration).profileIdCampaignsGet(id, options)(fetch, basePath);
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Server example operation
         * @param {number} id ID of profile to get
         * @param {string} [action] May follow or unfollow profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileIdGet(id: number, action?: string, options?: any) {
            return DefaultApiFp(configuration).profileIdGet(id, action, options)(fetch, basePath);
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Get profile posts
         * @param {number} id ID of profile to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileIdPostsGet(id: number, options?: any) {
            return DefaultApiFp(configuration).profileIdPostsGet(id, options)(fetch, basePath);
        },
        /**
         * Must be the same user
         * @summary Get user social links status
         * @param {number} id ID of profile to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileIdSocialLinksGet(id: number, options?: any) {
            return DefaultApiFp(configuration).profileIdSocialLinksGet(id, options)(fetch, basePath);
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Get profile thresholds
         * @param {number} id ID of profile to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileIdThresholdsGet(id: number, options?: any) {
            return DefaultApiFp(configuration).profileIdThresholdsGet(id, options)(fetch, basePath);
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Create new user
         * @param {NewProfile} [profile] Create user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilePost(profile?: NewProfile, options?: any) {
            return DefaultApiFp(configuration).profilePost(profile, options)(fetch, basePath);
        },
        /**
         * This is an example opeartion to show how security is applied to the call.
         * @summary Edit user profile
         * @param {EditProfile} [profile] Edit user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilePut(profile?: EditProfile, options?: any) {
            return DefaultApiFp(configuration).profilePut(profile, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * This is an example opeartion to show how security is applied to the call.
     * @summary Edit user profile
     * @param {} avatar Edit user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public avatarPost(avatar: any, options?: any) {
        return DefaultApiFp(this.configuration).avatarPost(avatar, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Deletes the campaign by id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public campaignIdDelete(options?: any) {
        return DefaultApiFp(this.configuration).campaignIdDelete(options)(this.fetch, this.basePath);
    }

    /**
     * This is an example opeartion to show how security is applied to the call.
     * @summary Donate to campaign
     * @param {} id ID of the campaign
     * @param {} [donation] Donate funds to campaign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public campaignIdDonatePost(id: number, donation?: Donation, options?: any) {
        return DefaultApiFp(this.configuration).campaignIdDonatePost(id, donation, options)(this.fetch, this.basePath);
    }

    /**
     * This is an example opeartion to show how security is applied to the call.
     * @summary Get campaign information
     * @param {} id ID of profile to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public campaignIdGet(id: number, options?: any) {
        return DefaultApiFp(this.configuration).campaignIdGet(id, options)(this.fetch, this.basePath);
    }

    /**
     * This is an example opeartion to show how security is applied to the call.
     * @summary Get campaign posts
     * @param {} id ID of campaign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public campaignIdPostsGet(id: number, options?: any) {
        return DefaultApiFp(this.configuration).campaignIdPostsGet(id, options)(this.fetch, this.basePath);
    }

    /**
     * Edit campaign data
     * @summary Edit campaign data
     * @param {} [campaign] Edit campaign data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public campaignIdPut(campaign?: NewCampaign, options?: any) {
        return DefaultApiFp(this.configuration).campaignIdPut(campaign, options)(this.fetch, this.basePath);
    }

    /**
     * Create a new campaign
     * @summary Create new campaign
     * @param {} [campaign] Create campaign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public campaignPost(campaign?: NewCampaign, options?: any) {
        return DefaultApiFp(this.configuration).campaignPost(campaign, options)(this.fetch, this.basePath);
    }

    /**
     * This is an example opeartion to show how security is applied to the call.
     * @summary Delete a comment
     * @param {} id ID of the campaign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public commentIdDelete(id: number, options?: any) {
        return DefaultApiFp(this.configuration).commentIdDelete(id, options)(this.fetch, this.basePath);
    }

    /**
     * This is an example opeartion to show how security is applied to the call.
     * @summary Update a comment
     * @param {} id ID of the campaign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public commentIdPut(id: number, options?: any) {
        return DefaultApiFp(this.configuration).commentIdPut(id, options)(this.fetch, this.basePath);
    }

    /**
     * asdfasdf
     * @summary Get posts feed
     * @param {} [lastPost] last post to start from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public feedGet(lastPost?: number, options?: any) {
        return DefaultApiFp(this.configuration).feedGet(lastPost, options)(this.fetch, this.basePath);
    }

    /**
     * This is an example opeartion to show how security is applied to the call.
     * @summary Get media information
     * @param {} id ID of media to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public mediaIdGet(id: number, options?: any) {
        return DefaultApiFp(this.configuration).mediaIdGet(id, options)(this.fetch, this.basePath);
    }

    /**
     * This is an example opeartion to show how security is applied to the call.
     * @summary Get post comments
     * @param {} id ID of post to get
     * @param {} [lastComment] Last comment to start from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postIdCommentsGet(id: number, lastComment?: number, options?: any) {
        return DefaultApiFp(this.configuration).postIdCommentsGet(id, lastComment, options)(this.fetch, this.basePath);
    }

    /**
     * This is an example opeartion to show how security is applied to the call.
     * @summary Post a comment
     * @param {} id ID of the campaign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postIdCommentsPost(id: number, options?: any) {
        return DefaultApiFp(this.configuration).postIdCommentsPost(id, options)(this.fetch, this.basePath);
    }

    /**
     * This is an example opeartion to show how security is applied to the call.
     * @summary Delete post
     * @param {} id ID of post to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postIdDelete(id: number, options?: any) {
        return DefaultApiFp(this.configuration).postIdDelete(id, options)(this.fetch, this.basePath);
    }

    /**
     * This is an example opeartion to show how security is applied to the call.
     * @summary Get post information
     * @param {} id ID of post to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postIdGet(id: number, options?: any) {
        return DefaultApiFp(this.configuration).postIdGet(id, options)(this.fetch, this.basePath);
    }

    /**
     * asdf
     * @summary Search profile
     * @param {} [name] User name
     * @param {} [country] Country Name
     * @param {} [page] Pagination number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public profileGet(name?: string, country?: string, page?: number, options?: any) {
        return DefaultApiFp(this.configuration).profileGet(name, country, page, options)(this.fetch, this.basePath);
    }

    /**
     * This is an example opeartion to show how security is applied to the call.
     * @summary Get user campaigns
     * @param {} id ID of profile to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public profileIdCampaignsGet(id: number, options?: any) {
        return DefaultApiFp(this.configuration).profileIdCampaignsGet(id, options)(this.fetch, this.basePath);
    }

    /**
     * This is an example opeartion to show how security is applied to the call.
     * @summary Server example operation
     * @param {} id ID of profile to get
     * @param {} [action] May follow or unfollow profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public profileIdGet(id: number, action?: string, options?: any) {
        return DefaultApiFp(this.configuration).profileIdGet(id, action, options)(this.fetch, this.basePath);
    }

    /**
     * This is an example opeartion to show how security is applied to the call.
     * @summary Get profile posts
     * @param {} id ID of profile to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public profileIdPostsGet(id: number, options?: any) {
        return DefaultApiFp(this.configuration).profileIdPostsGet(id, options)(this.fetch, this.basePath);
    }

    /**
     * Must be the same user
     * @summary Get user social links status
     * @param {} id ID of profile to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public profileIdSocialLinksGet(id: number, options?: any) {
        return DefaultApiFp(this.configuration).profileIdSocialLinksGet(id, options)(this.fetch, this.basePath);
    }

    /**
     * This is an example opeartion to show how security is applied to the call.
     * @summary Get profile thresholds
     * @param {} id ID of profile to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public profileIdThresholdsGet(id: number, options?: any) {
        return DefaultApiFp(this.configuration).profileIdThresholdsGet(id, options)(this.fetch, this.basePath);
    }

    /**
     * This is an example opeartion to show how security is applied to the call.
     * @summary Create new user
     * @param {} [profile] Create user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public profilePost(profile?: NewProfile, options?: any) {
        return DefaultApiFp(this.configuration).profilePost(profile, options)(this.fetch, this.basePath);
    }

    /**
     * This is an example opeartion to show how security is applied to the call.
     * @summary Edit user profile
     * @param {} [profile] Edit user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public profilePut(profile?: EditProfile, options?: any) {
        return DefaultApiFp(this.configuration).profilePut(profile, options)(this.fetch, this.basePath);
    }

}
